type Query {
  user(id: String): User!
  post(id: ID): Post!
  comment(id: ID): Comment!
  point(id:ID):Point!
  postList(Page:Int):postPayload!
  commentList(Page:Int, postID:ID):commentPayload!
}

type Mutation {
  newUser(id: String, name: String, password: String): User!
  modifyUser(id: String, name: String, password: String): User!
  newPost(title: String, publisherID: String, body: String, time: String): Post!
  newComment(publisherID: String, body: String, time: String, parentPostID: ID): Comment!
  deletePost(postID: ID): Boolean
  doLike(userID:ID, pointID:ID): Point
}

type postPayload {
  posts: [Post]
  pageNum: Int
}

type commentPayload {
  comments: [Comment]
  pageNum: Int
}


type User {
  id: String!
  name: String!
  password: String!
}

type Post {
  title: String!
  publisher: User!
  comments: [Comment]!
  body: String!
  like: Point!
  unlike: Point!
  time: String!
  objID: ID!
}

type Comment {
  publisher: User!
  body: String!
  like: Point!
  unlike: Point!
  time: String!
}

type Point {
  users: [User]!
  count: Int!
  type: Boolean!
}






